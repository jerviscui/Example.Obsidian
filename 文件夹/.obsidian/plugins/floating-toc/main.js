/*
	This is the Obsidian example vault is amazing, there are a lot of dazzling features and showcase, I believe you will wonder a bit, is this Obsidian?
	[Blue-topaz-examples](https://github.com/cumany/Blue-topaz-examples)
	*/

var ue=Object.create;var M=Object.defineProperty;var me=Object.getOwnPropertyDescriptor;var be=Object.getOwnPropertyNames;var ye=Object.getPrototypeOf,Ce=Object.prototype.hasOwnProperty;var N=n=>M(n,"__esModule",{value:!0});var ve=(n,e)=>{N(n);for(var s in e)M(n,s,{get:e[s],enumerable:!0})},Te=(n,e,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of be(e))!Ce.call(n,r)&&r!=="default"&&M(n,r,{get:()=>e[r],enumerable:!(s=me(e,r))||s.enumerable});return n},k=n=>Te(N(M(n!=null?ue(ye(n)):{},"default",n&&n.__esModule&&"default"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n);var w=(n,e,s)=>new Promise((r,a)=>{var o=l=>{try{i(s.next(l))}catch(d){a(d)}},t=l=>{try{i(s.throw(l))}catch(d){a(d)}},i=l=>l.done?r(l.value):Promise.resolve(l.value).then(o,t);i((s=s.apply(n,e)).next())});ve(exports,{default:()=>P,refresh_node:()=>he,selfDestruct:()=>F});var p=k(require("obsidian"));var f=k(require("obsidian"));function O(n,e,s,r,a=null){return w(this,null,function*(){let o=/(?<=^\s*)[0-9]+\.\s/,t=/(?<=^\s*)[\-\+]\s/,i,l="";(i=o.exec(e))!==null?(l=i[0],e=e.replace(o,"")):(i=t.exec(e))!==null&&(l=i[0],e=e.replace(t,""));let d=s;yield f.MarkdownRenderer.renderMarkdown(e,d,r,a);let C=d.createEl("a");C.addClass("text"),C.onclick=function(g){var T;let c=(T=parseInt(d.parentElement.getAttribute("data-line")))!=null?T:0;if(g.ctrlKey)we(n,c);else{Se(n,c);let h=d.parentElement.parentElement.querySelector(".text-wrap.located");h&&h.removeClass("located"),d.addClass("located")}};let u=d.querySelector("p");if(u){let g=/<a[^>]*>|<\/[^>]*a>/gm;l?C.innerHTML=l+u.innerHTML.replace(g,""):C.innerHTML=u.innerHTML.replace(g,""),d.removeChild(u)}})}function V(n,e,s,r){return w(this,null,function*(){let a=e.createEl("li");a.addClass("heading-list-item"),a.setAttribute("data-level",s.level.toString()),a.setAttribute("data-id",r.toString()),a.setAttribute("data-line",s.position.start.line.toString());let o=a.createEl("div");o.addClass("text-wrap"),O(n,s.heading,o,n.file.path,null);let t=a.createEl("div");t.addClass("line-wrap"),t.createDiv().addClass("line")})}var Se=(n,e)=>{n.leaf.openFile(n.file,{eState:{line:e}})},we=(n,e)=>{var o,t;let s=(t=(o=n==null?void 0:n.currentMode.getFoldInfo())==null?void 0:o.folds)!=null?t:[],r=e,a=0;if(s.some((i,l)=>(a=l,i.from==r)))s.splice(a,1);else{let i={from:e,to:e+1};s.push(i)}n==null||n.currentMode.applyFoldInfo({folds:s,lines:n.editor.lineCount()}),n==null||n.onMarkdownFold()};function H(n,e){var a;let s=(o,t)=>{e.settings.positionStyle=="right"?(t.addClass("floating-right"),t.removeClass("floating-left")):e.settings.positionStyle=="left"&&(t.addClass("floating-left"),t.removeClass("floating-rigth")),e.settings.isLeft?(t.removeClass("alignLeft"),t.addClass("alignLeft")):t.removeClass("alignLeft");let i=t.createEl("ul");i.addClass("floating-toc");let l=i.createEl("div");l.addClass("toolbar"),l.addClass("pin"),l.addClass("hide"),new f.ButtonComponent(l).setIcon("pin").setTooltip("pin").onClick(()=>{t.classList.contains("pin")?t.removeClass("pin"):t.addClass("pin")}),i.onmouseenter=function(){l.removeClass("hide"),t.addClass("hover")},i.onmouseleave=function(){l.addClass("hide"),t.removeClass("hover")},new f.ButtonComponent(l).setIcon("double-up-arrow-glyph").setTooltip("Scroll to Top").setClass("top").onClick(()=>{let h=this.app.workspace.getActiveViewOfType(f.MarkdownView);h&&h.setEphemeralState({scroll:0})}),new f.ButtonComponent(l).setIcon("copy").setTooltip("copy to clipboard").setClass("copy").onClick(()=>w(this,null,function*(){let h=globalThis.headingdata.map(v=>"    ".repeat(v.level-1)+v.heading);yield navigator.clipboard.writeText(h.join(`
`)),new f.Notice("Copied")}));let g=n.workspace.getActiveFile(),c=n.metadataCache.getFileCache(g).headings,T=[];c==null||c.map(h=>{h.heading=h.heading.replace(/<\/?[\s\S]*?(?:".*")*>/g,""),T.push(h)}),globalThis.headingdata=T,globalThis.headingdata&&(e.settings.ignoreTopHeader&&(globalThis.headingdata=n.metadataCache.getFileCache(g).headings.slice(1)),globalThis.headingdata.forEach((h,v)=>{let m=n.workspace.getActiveViewOfType(f.MarkdownView);V(m,i,h,v)}),o==null||o.querySelector(".markdown-source-view").insertAdjacentElement("beforebegin",t))};if(this.app.workspace.getActiveViewOfType(f.MarkdownView)){(0,f.requireApiVersion)("0.15.0")?activeDocument=activeWindow.document:activeDocument=window.document;let o=e.app.workspace.getActiveViewOfType(f.MarkdownView);if((a=o.contentEl)==null?void 0:a.querySelector(".floating-toc-div"))return;{let i=createEl("div");i.addClass("floating-toc-div"),s(o.contentEl,i)}}}var E=k(require("obsidian"));var z=["left","right"],R={ignoreTopHeader:!1,positionStyle:"left",isLoadOnMobile:!0,isLeft:!1};var ge=k(require("obsidian"));var W={};var j={};var U={};var G={};var D={"Floating TOC position":"Floating TOC position","Floating TOC position, default on the left side of the notes":"Floating TOC position, default on the left side of the notes","Ignore top-level headers":"Ignore top-level headers","Select whether to ignore the top-level headings. When turned on, the top-level headings in the current note are not displayed in the floating TOC.":"Select whether to ignore the top-level headings. When turned on, the top-level headings in the current note are not displayed in the floating TOC.","Plugin Settings":"Plugin Settings","Plugin Style Settings":"Plugin Style Settings","Mobile enabled or not":"Mobile enabled or not","Whether to enable the plugin for the mobile client, the default is enabled.":"Whether to enable the plugin for the mobile client, the default is enabled.","If the floating Toc option is not found in the style setting, please reload the style setting plugin (turn it off and on again)":"If the floating Toc option is not found in the style setting, please reload the style setting plugin (turn it off and on again)","Left Aligned":"Left Aligned","whether it is left or right aligned When the floating toc is on the right":"whether it is left or right aligned When the floating toc is on the right"};var J={};var Y={};var $={};var K={};var Q={};var X={};var Z={};var ee={};var te={};var ne={};var ie={};var oe={};var le={};var ae={};var se={};var re={};var de={"Floating TOC position":"\u6D6E\u52A8\u76EE\u5F55\u663E\u793A\u4F4D\u7F6E","Floating TOC position, default on the left side of the notes":"\u6D6E\u52A8\u76EE\u5F55\u663E\u793A\u4F4D\u7F6E\uFF0C\u9ED8\u8BA4\u663E\u793A\u5728\u7B14\u8BB0\u5DE6\u4FA7","Ignore top-level headers":"\u662F\u5426\u5FFD\u7565\u9876\u7EA7\u76EE\u5F55","Select whether to ignore the top-level headings. When turned on, the top-level headings in the current note are not displayed in the floating TOC.":"\u9009\u62E9\u662F\u5426\u5FFD\u7565\u9876\u7EA7\u6807\u9898\uFF0C\u5F00\u542F\u540E\u5F53\u524D\u6587\u6863\u4E2D\u6700\u9876\u7EA7\u7684\u6807\u9898\u4E0D\u663E\u793A\u5728\u6D6E\u52A8\u76EE\u5F55\u4E2D\u3002","Plugin Settings":"\u63D2\u4EF6\u8BBE\u7F6E","Plugin Style Settings":"\u63D2\u4EF6\u6837\u5F0F\u8BBE\u7F6E","Mobile enabled or not":"\u662F\u5426\u5728\u79FB\u52A8\u7AEF\u542F\u7528","Whether to enable the plugin for the mobile client, the default is enabled.":"\u79FB\u52A8\u5BA2\u6237\u7AEF\u662F\u5426\u542F\u7528\u63D2\u4EF6\uFF0C\u9ED8\u8BA4\u542F\u7528\u3002","If the floating Toc option is not found in the style setting, please reload the style setting plugin (turn it off and on again)":"\u5982\u679Cstyle setting \u4E2D\u65E0\u6CD5\u770B\u5230 floating Toc\u9009\u9879\uFF0C\u8BF7\u91CD\u8F7Dstyle setting\u63D2\u4EF6\uFF08\u5173\u95ED\u518D\u5F00\u542F\u5373\u53EF\uFF09","Left Aligned":"\u5DE6\u5BF9\u9F50","whether it is left or right aligned When the floating toc is on the right":"\u5F53\u5DE5\u5177\u680F\u5728\u53F3\u4FA7\u65F6\uFF0C\u662F\u5426\u5DE6\u5BF9\u9F50"};var ce={};var Ee={ar:W,cs:j,da:U,de:G,en:D,"en-gb":J,es:Y,fr:$,hi:K,id:Q,it:X,ja:Z,ko:ee,nl:te,nn:ne,pl:ie,pt:oe,"pt-br":le,ro:ae,ru:se,tr:re,"zh-cn":de,"zh-tw":ce},pe=Ee[ge.moment.locale()];function b(n){return pe&&pe[n]||D[n]}var _=class extends E.PluginSettingTab{constructor(e,s){super(e,s);this.plugin=s,addEventListener("refresh-toc",()=>{F(),H(e,this.plugin)})}display(){let{containerEl:e}=this;e.empty(),e.createEl("h1",{text:"Obsidian Floating TOC "}),e.createEl("span",{text:""}).createEl("a",{text:"Author: Cuman \u2728",href:"https://github.com/cumany"}),e.createEl("span",{text:""}).createEl("a",{text:"Readme:\u4E2D\u6587",href:"https://github.com/cumany/obsidian-floating-toc-plugin/blob/master/README-zh_cn.md"}),e.createEl("span",{text:""}).createEl("a",{text:"|English  ",href:"https://github.com/cumany/obsidian-floating-toc-plugin/blob/master/README.md"}),e.createEl("p",{text:"\u{1F511}TIPS: "}).createEl("p",{text:"ctrl + click on the floating toc to collapse/expand the header."}),e.createEl("h2",{text:b("Plugin Settings")}),new E.Setting(e).setName(b("Floating TOC position")).setDesc(b("Floating TOC position, default on the left side of the notes")).addDropdown(t=>{let i={};z.map(l=>i[l]=l),t.addOptions(i),t.setValue(this.plugin.settings.positionStyle).onChange(l=>{this.plugin.settings.positionStyle=l,this.plugin.saveSettings(),setTimeout(()=>{this.display(),dispatchEvent(new Event("refresh-toc"))},100)})}),this.plugin.settings.positionStyle=="right"&&new E.Setting(e).setName(b("Left Aligned")).setDesc(b("whether it is left or right aligned When the floating toc is on the right")).addToggle(t=>{var i;return t.setValue((i=this.plugin.settings)==null?void 0:i.isLeft).onChange(l=>{this.plugin.settings.isLeft=l,this.plugin.saveSettings(),setTimeout(()=>{this.display(),dispatchEvent(new Event("refresh-toc"))},100)})}),new E.Setting(e).setName(b("Mobile enabled or not")).setDesc(b("Whether to enable the plugin for the mobile client, the default is enabled.")).addToggle(t=>{var i;return t.setValue((i=this.plugin.settings)==null?void 0:i.isLoadOnMobile).onChange(l=>{this.plugin.settings.isLoadOnMobile=l,this.plugin.saveSettings(),setTimeout(()=>{dispatchEvent(new Event("refresh-toc"))},100)})}),new E.Setting(e).setName(b("Ignore top-level headers")).setDesc(b("Select whether to ignore the top-level headings. When turned on, the top-level headings in the current note are not displayed in the floating TOC.")).addToggle(t=>{var i;return t.setValue((i=this.plugin.settings)==null?void 0:i.ignoreTopHeader).onChange(l=>{this.plugin.settings.ignoreTopHeader=l,this.plugin.saveSettings(),setTimeout(()=>{dispatchEvent(new Event("refresh-toc"))},100)})}),e.createEl("h2",{text:b("Plugin Style Settings")}),app.plugins.enabledPlugins.has("obsidian-style-settings")?(e.createEl("p",{text:"\u{1F514}Notice: "}).createEl("p",{text:b("If the floating Toc option is not found in the style setting, please reload the style setting plugin (turn it off and on again)")}),new E.ButtonComponent(e).setIcon("palette").setClass("tiny").setButtonText("\u{1F3A8} Open style settings").onClick(()=>{app.setting.open(),setTimeout(()=>app.setting.openTabById("obsidian-style-settings"),300)})):e.createEl("span",{text:""}).createEl("a",{text:"Please install or enable the style-settings plugin",href:"obsidian://show-plugin?id=obsidian-style-settings"});let r=e.createEl("div",{cls:"cDonationSection"}),a=createEl("p"),o=createEl("p");o.appendText("If you like this Plugin and are considering donating to support continued development, use the button below!"),a.setAttribute("style","color: var(--text-muted)"),r.appendChild(o),r.appendChild(a),r.appendChild(xe("https://github.com/cumany#thank-you-very-much-for-your-support"))}},xe=n=>{let e=createEl("a");return e.setAttribute("href",n),e.addClass("buymeacoffee-img"),e.innerHTML='<img src="https://img.buymeacoffee.com/button-api/?text=Buy me a coffee &emoji=&slug=Cuman&button_colour=BD5FFF&font_colour=ffffff&font_family=Poppins&outline_colour=000000&coffee_colour=FFDD00" />',e};var y,x=0;function F(){(0,p.requireApiVersion)("0.15.0")?y=activeWindow.document:y=window.document,y.querySelectorAll(".floating-toc-div").forEach(e=>{e&&e.remove()})}function he(n){var s;(0,p.requireApiVersion)("0.15.0")?y=activeWindow.document:y=window.document;let e=(s=n.contentEl)==null?void 0:s.querySelector(".floating-toc-div");if(e){let r=e.querySelector("ul.floating-toc");r||(r=e.createEl("ul"),r.addClass("floating-toc"));let a=e==null?void 0:e.querySelectorAll("li.heading-list-item"),o=globalThis.headingdata;return o?(a.length>=o.length?a==null||a.forEach((t,i)=>{var l;if(o[i]){if(o[i].level==t.getAttribute("data-level")&&o[i].heading==t.children[0].innerText&&o[i].position.start.line==t.getAttribute("data-line"))return;t.setAttribute("data-level",o[i].level.toString()),t.setAttribute("data-id",i.toString()),t.setAttribute("data-line",o[i].position.start.line.toString()),(l=t.children[0].querySelector("a"))==null||l.remove(),O(n,o[i].heading,t.children[0],n.file.path,null)}else t.remove()}):o==null||o.forEach((t,i)=>{var l;if(i<=a.length-1){if(t.level.toString()==a[i].getAttribute("data-level")&&t.heading==a[i].children[0].innerText&&t.position.start.line.toString()==a[i].getAttribute("data-line"))return;a[i].setAttribute("data-level",t.level.toString()),a[i].setAttribute("data-id",i.toString()),a[i].setAttribute("data-line",t.position.start.line.toString()),(l=a[i].children[0].querySelector("a"))==null||l.remove(),O(n,t.heading,a[i].children[0],n.file.path,null)}else V(n,r,t,i)}),!0):(r.remove(),!1)}else return!1}function fe(n){for(var e=[];n=n.previousElementSibling;)n.nodeType==1&&e.push(n);return e}function Le(n){var s,r,a,o,t,i;let e=n.target;if(((s=e.parentElement)==null?void 0:s.classList.contains("cm-editor"))||((r=e.parentElement)==null?void 0:r.classList.contains("markdown-reading-view"))){let l=app.workspace.getActiveViewOfType(p.MarkdownView),d,C={};if(l){d=(a=l.currentMode.getScroll())!=null?a:0;let u=globalThis.headingdata,g=(o=u==null?void 0:u.length)!=null?o:0,c=l.contentEl.querySelector(".floating-toc");if(c){let T=parseInt((t=c.querySelector("li.heading-list-item"))==null?void 0:t.getAttribute("data-line")),h=parseInt((i=c.lastElementChild)==null?void 0:i.getAttribute("data-line"));if(d<=0){let v=c.querySelector(".heading-list-item.located");v&&v.removeClass("located");let m=c==null?void 0:c.querySelector(`li[data-line='${T}']`);m&&m.addClass("located");let S=parseInt(m.getAttribute("data-level"));S=S>1?S-1:1;let I=fe(m),L=c==null?void 0:c.querySelector("li.focus");L&&L.removeClass("focus"),I.some(B=>{if(B.dataset.level<=S.toString())return B.addClass("focus"),!0});let A=c.querySelector(".heading-list-item");setTimeout(()=>A.scrollIntoViewIfNeeded(),300)}else{for(;--g>=0;)if(u[g].position.start.line<=d){C=u[g],x=u[g].position.start.line;break}if(!C)return;let v=c.querySelector(".heading-list-item.located");v&&v.removeClass("located"),!x&&c&&(x=T);let m=c==null?void 0:c.querySelector(`li[data-line='${x}']`);if(m){if(x==h||x==T)m.addClass("located");else if(m.nextElementSibling){m.nextElementSibling.addClass("located");let S=parseInt(m.nextElementSibling.getAttribute("data-level"));S=S>1?S-1:1;let I=fe(m.nextElementSibling),L=c==null?void 0:c.querySelector("li.focus");L&&L.removeClass("focus"),I.some(A=>{if(A.dataset.level<=S.toString())return A.addClass("focus"),!0})}m.scrollIntoViewIfNeeded()}}}}}}var q=(0,p.debounce)(Le,200),P=class extends p.Plugin{onload(){return w(this,null,function*(){(0,p.requireApiVersion)("0.15.0")?y=activeWindow.document:y=window.document,yield this.loadSettings();let e=o=>{o&&(he(o)||H(app,this))},s=this.settings.isLoadOnMobile;if(p.Platform.isMobileApp&&s){console.log("floating toc disable loading on mobile");return}this.addCommand({id:"pin-toc-panel",name:"Pinning the Floating TOC panel",icon:"pin",callback:()=>w(this,null,function*(){let o=this.app.workspace.getActiveViewOfType(p.MarkdownView);if(o){let t=o.contentEl.querySelector(".floating-toc-div");t&&(t.classList.contains("pin")?t.removeClass("pin"):t.addClass("pin"))}})}),this.registerEvent(this.app.workspace.on("active-leaf-change",()=>{let o=this.app.workspace.getActiveViewOfType(p.MarkdownView);if(o){let t=this.app.workspace.getActiveFile(),i=this.app.metadataCache.getFileCache(t).headings,l=[];i==null||i.map(d=>{d.heading=d.heading.replace(/<\/?[\s\S]*?(?:".*")*>/g,""),l.push(d)}),globalThis.headingdata=l,this.settings.ignoreTopHeader&&(globalThis.headingdata=i.slice(1)),a(o)}})),this.registerEvent(this.app.metadataCache.on("changed",()=>{var t;let o=this.app.workspace.getActiveViewOfType(p.MarkdownView);if(o){let i=o.file,l=this.app.metadataCache.getFileCache(i).headings,d=[];l==null||l.map(g=>{g.heading=g.heading.replace(/<\/?[\s\S]*?(?:".*")*>/g,""),d.push(g)});let C=d==null?void 0:d.map(g=>g.level+g.heading+g.position.start.line),u=(t=globalThis.headingdata)==null?void 0:t.map(g=>g.level+g.heading+g.position.start.line);if(JSON.stringify(u)==JSON.stringify(C))return;globalThis.headingdata=d,this.settings.ignoreTopHeader&&(globalThis.headingdata=d.slice(1)),a(o)}}));let r=o=>{e(o)},a=o=>(0,p.debounce)(r(o),300,!0);y.addEventListener("scroll",q,!0),this.addSettingTab(new _(this.app,this)),e(this.app.workspace.getActiveViewOfType(p.MarkdownView)),(0,p.requireApiVersion)("0.15.0")&&this.app.workspace.on("window-open",o=>{o.doc.addEventListener("scroll",q,!0)}),app.workspace.onLayoutReady(()=>{app.workspace.trigger("parse-style-settings")})})}onunload(){(0,p.requireApiVersion)("0.15.0")?y=activeWindow.document:y=window.document,y.removeEventListener("scroll",q,!0),F()}loadSettings(){return w(this,null,function*(){this.settings=Object.assign({},R,yield this.loadData())})}saveSettings(){return w(this,null,function*(){yield this.saveData(this.settings)})}};
//# sourceMappingURL=data:application/json;base64,
